import { Routes, PreloadAllModules, RouterModule } from '@angular/router';
import { redirectUnauthorizedTo, redirectLoggedInTo, canActivate } from '@angular/fire/auth-guard';

const redirectUnauthorizedToLogin = () => redirectUnauthorizedTo(['login']);
const redirectLoggedInToCampeonatos = () => redirectLoggedInTo(['campeonatos']);

export const routes: Routes = [
  {
    path: '',
    redirectTo: 'login', // Redireciona para login se o caminho for vazio
    pathMatch: 'full',
  },
  {
    path: 'login',
    loadComponent: () => import('./login/login.page').then( m => m.LoginPage),
    ...canActivate(redirectLoggedInToCampeonatos) // Se j치 logado, redireciona para campeonatos
  },
  {
    path: 'campeonatos',
    loadComponent: () => import('./campeonatos/campeonatos.page').then( m => m.CampeonatosPage),
    ...canActivate(redirectUnauthorizedToLogin) // Requer autentica칞칚o
  },
  {
    path: 'times/:campeonatoId',
    loadComponent: () => import('./times/times.page').then( m => m.TimesPage),
    ...canActivate(redirectUnauthorizedToLogin) // Requer autentica칞칚o
  },
  {
    path: 'rodada/:campeonatoId/:fase', // Rota para o dono e usu치rios logados
    loadComponent: () => import('./rodada/rodada.page').then( m => m.RodadaPage),
    ...canActivate(redirectUnauthorizedToLogin) // Requer autentica칞칚o para acesso normal
  },
  {
    path: 'publico/:codigoAcessoPublico', // 游댠 NOVA ROTA PARA ACESSO P칔BLICO
    loadComponent: () => import('./rodada/rodada.page').then( m => m.RodadaPage)
    // ATEN칂츾O: Para esta rota, n칚o adicionamos o canActivate(redirectUnauthorizedToLogin)
    // Isso permite que usu치rios n칚o logados acessem esta p치gina.
    // As regras de seguran칞a do Firebase (passo 11) e a l칩gica na RodadaPage (passo 12)
    // controlar칚o as permiss칫es de leitura/escrita.
  },
  {
    path: '**',
    redirectTo: 'login'
  }
];